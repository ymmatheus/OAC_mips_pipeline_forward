library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity RegIDEX is
	port(	RD1						:in	std_logic_vector(31 downto 0);
			RD2						:in	std_logic_vector(31 downto 0);	
			RegWriteD				:in	std_logic;
			MemtoRegD				:in 	std_logic;
			MemWriteD				:in	std_logic;
			ALUControlD				:in	std_logic_vector(2 downto 0);
			ALUSrcD					:in	std_logic;
			RegDstD					:in	std_logic;
			RsD						:in 	std_logic_vector(4 downto 0);
			RtD						:in	std_logic_vector(4 downto 0);
			RdD						:in	std_logic_vector(4 downto 0);
			SignImmD					:in	std_logic_vector(31 downto 0);
			CLR						:in	std_logic;
			clk						:in	std_logic;
			RegWriteE				:out	std_logic;
			MemtoRegE				:out 	std_logic;
			MemWriteE				:out	std_logic;
			ALUControlE				:out	std_logic_vector(2 downto 0);
			ALUSrcE					:out	std_logic;
			RegDstE					:out	std_logic;
			RsE						:out	std_logic_vector(4 downto 0);
			RtE						:out	std_logic_vector(4 downto 0);
			RdE						:out	std_logic_vector(4 downto 0);
			SignImmE					:out	std_logic_vector(31 downto 0));
end RegIDEX;

architecture reg_idex of RegIFID is
signal RegWD: std_logic;
signal MemRegD: std_logic;
signal MemWD: std_logic;
signal
signal progcounter : std_logic_vector(31 downto 0):= X"00000000";

begin

	proc_escrita: process(EN,CLR,InstrF,PCplus4F, clk)
	begin
		if (rising_edge(clk) and EN = '0' and CLR = '0') then
			instr_interno <= InstrF;
			progcounter <= PCplus4f;
		end if;
		
		if(CLR = '1') then
			instr_interno <= X"00000000";
		end if;
	end process;
	
	proc_leitura: process(EN, CLR, clk)
	begin
		if (rising_edge(clk) and EN = '1') then
			InstrD <= instr_interno;
			PCplus4D <= progcounter;
		end if;
	end process;
end reg_ifid;
			